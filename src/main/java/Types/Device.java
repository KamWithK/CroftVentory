/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Types;

import javafx.beans.property.*;

import java.math.BigDecimal;
import java.util.Objects;

import static ObjectManager.StorageController.getBookingList;

/**
 *
 * Defines the Device object
 * 
 * @author kamron
 * 
 */

public class Device {
    // Properties
    // These are used over variables as they can utilize events
    private SimpleStringProperty Name = new SimpleStringProperty();
    private SimpleIntegerProperty Quantity = new SimpleIntegerProperty();
    private SimpleObjectProperty<BigDecimal> Value = new SimpleObjectProperty<>();
    private SimpleLongProperty ID = new SimpleLongProperty();
    
    // Initializer
    // Uses polymorphism to handle storing and retrieving data from database
    // As ID is generated by database itself (for security reasons)
    public Device(String name, int quantity, BigDecimal value, long id) {
        this.Name.set(name);
        this.Quantity.set(quantity);
        this.Value.set(value);
        this.ID.set(id);
    }

    public Device(String name, int quantity, BigDecimal value) {
        this.Name.set(name);
        this.Quantity.set(quantity);
        this.Value.set(value);
    }
    
    // Getters
    // Getters which return properties
    // Useful for UI elements
    public StringProperty nameProperty() { return Name; }
    public IntegerProperty quantityProperty() { return Quantity; }
    public ObjectProperty<BigDecimal> valueProperty() { return Value; }
    public LongProperty IDProperty() { return ID; }
    
    //Getters for variables
    //Useful for validation and other purposes
    public String getName() { return Name.get(); }
    public Integer getQuantity() { return Quantity.get(); }
    public BigDecimal getValue() { return Value.get(); }
    public Long getLngID() { return ID.get(); }
    
   // Setters
   public void setName(String value) { Name.set(value); }
   public void setQuantity(int value) { Quantity.set(value); }
   public void setValue(BigDecimal value) { Value.set(value); }
   // Note, ID is read only, and so there is no setter for the property
   
   // Finds how many of this device currently are not borrowed
   public Integer getRemaining() {
       // Pre-set the remaining number of devices as the total number available
       // Use Integer object instead of primitive int to avoid unboxing
       Integer remaining = Quantity.get();

       // If the device is not borrowed subtract the number of devices held from the total
       for (Booking booking : getBookingList()) {
           if (Objects.equals(booking.getDevice(), ID.getValue()) && !booking.getReturned()) {
               remaining -= booking.getQuantity();
           }
       }
       
       return remaining;
   }
   
   // Must override the toString method to allow it to work easily with UI elements
    @Override
    public String toString() {
        return Name.get();
    }
}
